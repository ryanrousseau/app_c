step "deploy-an-aws-cloudformation-template" {
    name = "Deploy an AWS CloudFormation template"

    action {
        action_type = "Octopus.AwsRunCloudFormation"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.CloudFormationStackName = "#{Project.AWS.StackName}"
            Octopus.Action.Aws.CloudFormationTemplate = "template.json"
            Octopus.Action.Aws.CloudFormationTemplateParametersRaw = "params.json"
            Octopus.Action.Aws.Region = "#{Project.AWS.RegionCode}"
            Octopus.Action.Aws.TemplateSource = "Package"
            Octopus.Action.Aws.WaitForCompletion = "True"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "Project.Tenant.AWS.Account"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "template.json, params.json"
            Octopus.Action.Package.PackageId = "MR.Infrastructure"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopusdeploy/worker-tools:6.1.1-ubuntu.22.04"
        }

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "MR.Infrastructure"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "create-namespace" {
    name = "Create namespace"
    properties = {
        Octopus.Action.TargetRoles = "app-cluster"
    }

    action {
        action_type = "Octopus.KubernetesRunScript"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $namespace = $OctopusParameters["Project.K8s.Namespace"]
                
                kubectl create namespace $namespace --dry-run=client -o yaml | kubectl apply -f -
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        container {
            feed = "docker-hub"
            image = "octopuslabs/k8s-workertools:latest"
        }
    }
}

step "deploy-with-kustomize" {
    name = "Deploy with Kustomize"
    properties = {
        Octopus.Action.TargetRoles = "app-cluster"
    }

    action {
        action_type = "Octopus.Kubernetes.Kustomize"
        properties = {
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.Kubernetes.DeploymentTimeout = "180"
            Octopus.Action.Kubernetes.Kustomize.OverlayPath = "k8s/tenants/#{Octopus.Deployment.Tenant.Name}"
            Octopus.Action.Kubernetes.ResourceStatusCheck = "True"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            Octopus.Action.SubstituteInFiles.TargetFiles = "k8s/**/*"
            OctopusUseBundledTooling = "False"
        }
        worker_pool = "hosted-ubuntu"

        container {
            feed = "docker-hub"
            image = "octopuslabs/k8s-workertools:latest"
        }

        packages "nginx" {
            acquisition_location = "NotAcquired"
            feed = "docker-hub"
            package_id = "nginx"
            properties = {
                Extract = "False"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}